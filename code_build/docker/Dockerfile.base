#################################################################################
# Base image for tsdat pipelines.  This image includes the core tsdat libraries
# and is used for all individual pipeline images.
# 
# The context for building this image should be the root of the pipelines
# repository.
#################################################################################
FROM public.ecr.aws/lambda/python:3.9

# Copy the python dependencies
COPY requirements.txt .
COPY environment.yml .

# Install Conda and create tsdat environment
RUN yum update -y && yum install -y wget && yum clean all

RUN wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -o miniconda.sh && sh Miniconda3-latest-Linux-x86_64.sh -b -p /opt/miniconda

RUN /opt/miniconda/bin/conda env create --file environment.yml --prefix /opt/conda-env

RUN /opt/conda-env/bin/pip install awslambdaric

# We now replace the imageâ€™s existing Python with Python from the conda environment:
RUN mv /var/lang/bin/python3.9 /var/lang/bin/python3.9-clean && ln -sf /opt/conda-env/bin/python /var/lang/bin/python3.9
RUN mv /var/lang/bin/pip3 /var/lang/bin/pip3-old && ln -sf /opt/conda-env/bin/pip /var/lang/bin/pip3


# Copy over all the shared code into the image
COPY utils utils
COPY build_utils build_utils
COPY shared shared
COPY storage-extra.yaml shared/
RUN cat shared/storage-extra.yaml >> shared/storage.yaml

# Create an empty pipelines package (specific pipeline packages will be pulled over 
# during the pipeline-specific build)
RUN mkdir pipelines && touch pipelines/__init__.py

# Copy our lambda function
COPY lambda_function.py .
RUN chmod +x lambda_function.py

# Copy the pipelines config file
COPY pipelines_config.yml .

# Default entrypoint from parent image is this:
#ENTRYPOINT ["/lambda-entrypoint.sh"]

# Default command is to run the lambda handler
CMD ["lambda_function.lambda_handler"]
